// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test the report form should render with the correct elements 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "5bgt4w",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "5bgt4w",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(ReportRow)
        authorise={[MockFunction]}
        fetching={false}
        formType="signup"
        history={
          Object {
            "location": Object {
              "pathname": "",
            },
            "push": [MockFunction],
          }
        }
        isLoggedIn={false}
      >
        <ReportRow
          authorise={[MockFunction]}
          changeReportStatus={[Function]}
          client="user"
          fetching={false}
          formType="signup"
          history={
            Object {
              "location": Object {
                "pathname": "",
              },
              "push": [MockFunction],
            }
          }
          isLoggedIn={true}
        >
          <ViewModal
            closeModal={[Function]}
            comment=""
            displayModal={false}
            image="https://via.placeholder.com/700x400"
          >
            <Modal
              ariaHideApp={false}
              bodyOpenClassName="ReactModal__Body--open"
              className="Modal"
              closeTimeoutMS={0}
              contentLabel="Modal Option"
              isOpen={false}
              overlayClassName="Overlay"
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              role="dialog"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
            >
              <Portal
                containerInfo={
                  <div
                    class="ReactModalPortal"
                  />
                }
              >
                <ModalPortal
                  ariaHideApp={false}
                  bodyOpenClassName="ReactModal__Body--open"
                  className="Modal"
                  closeTimeoutMS={0}
                  contentLabel="Modal Option"
                  defaultStyles={
                    Object {
                      "content": Object {
                        "WebkitOverflowScrolling": "touch",
                        "background": "#fff",
                        "border": "1px solid #ccc",
                        "borderRadius": "4px",
                        "bottom": "40px",
                        "left": "40px",
                        "outline": "none",
                        "overflow": "auto",
                        "padding": "20px",
                        "position": "absolute",
                        "right": "40px",
                        "top": "40px",
                      },
                      "overlay": Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                        "bottom": 0,
                        "left": 0,
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                      },
                    }
                  }
                  isOpen={false}
                  overlayClassName="Overlay"
                  parentSelector={[Function]}
                  portalClassName="ReactModalPortal"
                  role="dialog"
                  shouldCloseOnEsc={true}
                  shouldCloseOnOverlayClick={true}
                  shouldFocusAfterRender={true}
                  shouldReturnFocusAfterClose={true}
                  style={
                    Object {
                      "content": Object {},
                      "overlay": Object {},
                    }
                  }
                />
              </Portal>
            </Modal>
          </ViewModal>
          <tr
            className="row"
          >
            <td
              className="cell id"
            />
            <td
              className="cell type"
            >
              unspecified
            </td>
            <td
              className="cell comment-and-media"
              onClick={[Function]}
              onKeyPress={[Function]}
              role="presentation"
            >
              ...
            </td>
            <td
              className="cell location"
            />
            <td
              className="cell createdon"
            >
              unspecified
            </td>
            <td
              className="cell status client-view-draft"
            >
              draft
            </td>
            <td
              className="cell td-edit-report"
              onClick={[Function]}
              onKeyPress={[Function]}
              role="presentation"
            >
              Edit
            </td>
          </tr>
        </ReportRow>
      </Connect(ReportRow)>
    </Router>
  </MemoryRouter>
</Provider>
`;
